{"version":3,"file":"static/js/467.9991d034.chunk.js","mappings":"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","sources":["api/api.js","components/Loader/Loader.jsx","webpack://react-homework-template/./src/pages/MoviesPage/movies-page.module.css?9b57","components/MoviesSearch/movies-search.module.css","webpack://react-homework-template/./src/components/Searchform/search-form.module.css?ecd7","components/Searchform/Searchform.jsx","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/Button/button.module.css?6dda","components/Button/Button.jsx","components/MoviesSearch/MoviesSearch.jsx","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst API_KEY = '9d0df20d0e68b9609d989d5d76848891';\n\nexport const getTrendMovies = async () => {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/trending/movie/day',\n    {\n      params: {\n        api_key: API_KEY,\n      },\n    }\n  );\n  return response.data.results;\n};\n\n\nexport const getMovieById = async id => {\n  const response = await axios.get(`https://api.themoviedb.org/3/movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  \n  return response.data;\n\n\n};\n\n\nexport const getMoviesByQuery = async query => {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/search/movie',\n    {\n      params: {\n        api_key: API_KEY,\n        query,\n      },\n    }\n  );\n  return response.data.results;\n  \n};\n\n\nexport const getMovieCastById = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits`,\n    {\n      params: {\n        api_key: API_KEY,\n      },\n    }\n  );\n  \n  return response.data.cast;\n};\n\n\nexport const getMovieReviewsById = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews`,\n    { params: { api_key: API_KEY } }\n  );\n  console.log(response.data.results);\n  return response.data.results;\n};\n","import { Audio } from 'react-loader-spinner';\n\nexport const Loader = () => (\n    <div >\n      <Audio\n  height=\"80\"\n  width=\"80\"\n  radius=\"9\"\n  color=\"green\"\n  ariaLabel=\"three-dots-loading\"\n  wrapperStyle\n  wrapperClass\n/>\n    </div>\n  );\n\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"movies-page_wrapper__ez9yg\"};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"search-form_form__JRnjr\",\"button\":\"search-form_button__L6NB4\",\"input\":\"search-form_input__zLZVX\"};","import { useState, useEffect, useRef, useMemo } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nimport styles from \"./search-form.module.css\";\n\nexport const SearchForm = ({ onSubmit }) => {\n    const [state, setState] = useState({\n        search: \"\",\n    });\n\n    const inputRef = useRef(null);\n\n    useEffect(() => {\n        inputRef.current.focus();\n    }, [])\n\n    const handleChange = ({ target }) => {\n        const { name, value } = target;\n        setState({\n            ...state,\n            [name]: value,\n        })\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit({ ...state });\n        reset();\n    }\n\n    const reset = () => {\n        setState({\n            search: \"\"\n        });\n    }\n\n    const searchId = useMemo(() => nanoid(), []);\n\n    return (\n        <form onSubmit={handleSubmit} className={styles.form}>\n            <div className={styles.fieldGroup}>\n                \n                <input id={searchId} ref={inputRef} value={state.search} onChange={handleChange} required type=\"text\" name=\"search\"  className={styles.input} />\n            </div>\n            <button type=\"submit\" className={styles.button}>Search</button>\n        </form>\n    )\n}\n\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"button_button__rr3yo\"};","import css from \"./button.module.css\";\n\nexport const Button =({onClick, type=\"submit\", children}) => {\n    return <button onClick={onClick} className={css.button} type={type} >{children}</button>\n}","import { useState, useEffect } from \"react\";\nimport { Link, useSearchParams, useLocation } from \"react-router-dom\";\nimport Notiflix from 'notiflix';\n\n\nimport styles from \"./movies-search.module.css\";\n\nimport { SearchForm } from \"components/Searchform/Searchform\";\nimport { Button } from \"components/Button/Button\";\nimport { Loader } from \"components/Loader/Loader\";\n\nimport { getMoviesByQuery } from \"api/api\";\n\n\n\n\nexport const MoviesSearch = () => {\n  \n    //const [search, setSearch] = useState(\"\");\n    const [moviesGallery, setGallery] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    //const [page, setPage] = useState(1);\n    const [btnLoadMore, setLoadMore] = useState(false);\n\n    const[searchParams, setSearchParams] = useSearchParams();\n    const search = searchParams.get(\"search\");\n    const page = searchParams.get(\"page\");\n\n    const location=useLocation();\n  \n    useEffect (() => {\n//Отримуємо список фільмів, який  приходить в результаті запиту на REST API і додаємо в state \n  const addMoviesList = async () => {\n    try{\n        setLoading(true);\n        // (data) приходить в результаті запиту на REST API (сама функція запиту описана в файлі api)\n        const data =await getMoviesByQuery(search, page);\n    \n        if (data === 0) {\n            return Notiflix.Notify.failure('There are no images matching your search query. Please try again');\n        }\n      //Якщо приходить масив фільмів, і він не пустий, то додаємо його, інакше залишаємо масив prevMoviesGallery (тобто gallery, яка була у state до того)\n        setGallery(prevMoviesGallery => data.length ? [...prevMoviesGallery,...data] : prevMoviesGallery)\n        \n\n      //Перевірка, чи не закінчилися картинки для відображення кнопки Load More\n    const perPage = 20;\n        const totalPage = Math.ceil(data / perPage);\n        if (totalPage > page) {\n            setLoadMore(true);\n        } else {\n            setLoadMore(false);\n        }\n    }\n\n    catch (error){\n        setError(error.message)\n    }\n\n    finally{\n        setLoading(false)\n    }\n    }\n  // Функція буде запускатися тільки якщо не буде порожній search, бо при першому рендеру (загрузці сторінки) немає сенсу робити запит, поки нiчого не вводили в поле search\n  if(search){\n    addMoviesList()\n  }\n},[search,page])\n\n\n\n\n  //Функція для ортимання інформації з поля пошуку, тобто інпуту\nconst handleSearch = ({search}) =>{\n    //search та page зберігаємо в адресний рядок\n    setSearchParams({search, page:1})\n  //При введенні нового слова в поле пошуку і клілу (onSubmit) , попередній масив очищаємо, щоб він не залишався на екрані_ і оновлюємо порядок сторінок\n    setGallery([]);\n\n}\n\n\nconst loadMore = () =>setSearchParams({search, page:Number(page)+1});\n\n\nconst elements = moviesGallery.map(({ id,original_title }) => (<li key={id} className={styles.item}>\n    <Link to={`/movies/${id}`} state={{from:location}} >{original_title}</Link> \n</li>));\n\n\n\n  //для подальшої перевірки записуємо в константу, що масив картинок не порожній , тобто Boolean(moviesGallery.length) буде true. А якщо буде порожній , тоьто false, і далі в return не будемо відмальовувати компоненти\n  const isGallery=Boolean(moviesGallery.length)\n  \n\n    return (\n    <div className={styles.app}>\n    \n        <SearchForm onSubmit={handleSearch}/>\n        \n        {error && <p>{error}</p>}\n        {loading && <Loader/>}\n        {isGallery && <p>{elements}</p>}\n        {isGallery && btnLoadMore && <Button onClick={loadMore} type=\"button\">Load more</Button> }\n\n        \n    </div>\n    \n    )\n  }\n","import styles from \"./movies-page.module.css\";\nimport { MoviesSearch } from \"components/MoviesSearch/MoviesSearch\";\n\n\n\nexport const MoviesPage = ()=> {\n    return (\n        <div className={styles.wrapper}>\n                        \n            <MoviesSearch/>  \n            \n        </div>\n    )\n}"],"names":["API_KEY","getTrendMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","axios","params","api_key","sent","abrupt","data","results","stop","apply","arguments","getMovieById","_ref2","_callee2","id","_context2","concat","_x","getMoviesByQuery","_ref3","_callee3","query","_context3","_x2","getMovieCastById","_ref4","_callee4","_context4","cast","_x3","getMovieReviewsById","_ref5","_callee5","_context5","console","log","_x4","Loader","_jsx","children","Audio","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClass","SearchForm","onSubmit","_useState","useState","search","_useState2","_slicedToArray","state","setState","inputRef","useRef","useEffect","current","focus","reset","searchId","useMemo","size","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","_jsxs","e","preventDefault","_objectSpread","className","styles","ref","value","onChange","target","name","_defineProperty","required","type","Button","onClick","_ref$type","css","MoviesSearch","moviesGallery","setGallery","_useState3","_useState4","loading","setLoading","_useState5","_useState6","error","setError","_useState7","_useState8","btnLoadMore","setLoadMore","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","get","page","location","useLocation","addMoviesList","totalPage","Notiflix","prevMoviesGallery","_toConsumableArray","Math","ceil","t0","message","finish","elements","map","original_title","Link","to","from","isGallery","Boolean","Number","MoviesPage"],"sourceRoot":""}
{"version":3,"file":"static/js/392.f88400f3.chunk.js","mappings":"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","sources":["api/api.js","components/Cast/cast.module.css","components/Cast/Cast.jsx","components/Loader/Loader.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst API_KEY = '9d0df20d0e68b9609d989d5d76848891';\n\nexport const getTrendMovies = async () => {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/trending/movie/day',\n    {\n      params: {\n        api_key: API_KEY,\n      },\n    }\n  );\n  return response.data.results;\n};\n\n\nexport const getMovieById = async id => {\n  const response = await axios.get(`https://api.themoviedb.org/3/movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  \n  return response.data;\n\n\n};\n\n\nexport const getMoviesByQuery = async query => {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/search/movie',\n    {\n      params: {\n        api_key: API_KEY,\n        query,\n      },\n    }\n  );\n  return response.data.results;\n  \n};\n\n\nexport const getMovieCastById = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits`,\n    {\n      params: {\n        api_key: API_KEY,\n      },\n    }\n  );\n  \n  return response.data.cast;\n};\n\n\nexport const getMovieReviewsById = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews`,\n    { params: { api_key: API_KEY } }\n  );\n  console.log(response.data.results);\n  return response.data.results;\n};\n","// extracted by mini-css-extract-plugin\nexport default {};","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Notiflix from 'notiflix';\nimport styles from \"./cast.module.css\";\n\nimport { Loader } from \"components/Loader/Loader\";\nimport { getMovieCastById } from \"api/api\";\n\n\nconst Cast = () => {\n\n    const [cast, setCast] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    \n    const {id}=useParams();\n\n    useEffect (() => {\n \n    const addCast = async () => {\n    try{\n        setLoading(true);\n        const data =await getMovieCastById(id);\n    \n        if (data === 0) {\n            return Notiflix.Notify.failure('There are no information about cast for this movie');\n        }\n    \n        setCast(data);\n        \n        }\n\n    catch (error){\n        setError(error.message)\n    }\n\n    finally{\n        setLoading(false)\n    }\n    }\n  // викликаємо функцію в ній самій\n    addCast()\n},[id])\n\n\nconst elements = cast.map(({id, name, character, profile_path}) => (\n    <li key={id}>\n        <img\n            src={\n                profile_path\n                    ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                    : `https://www.salonlfc.com/wp-content/uploads/2018/01/image-not-found-scaled-1150x647.png`\n            }\n            alt={name}\n            width=\"100\"\n        />\n        <h4>{name}</h4>\n        <p>Character: {character}</p>\n    </li>))\n\n//для подальшої перевірки записуємо в константу, що масив картинок(gallery) не порожній , тобто Boolean(gallery.length) буде true. А якщо буде порожній , тоьто false, і далі в return не будемо відмальовувати компоненти\nconst isCast=Boolean(cast.length)\n\n\n    return (\n    <div className={styles.cast}>\n            \n        {error && <p>{error}</p>}\n        {loading && <Loader/>}\n        {isCast && <ol>{elements}</ol>}\n                \n    </div>\n    \n    )\n}\n\nexport default Cast;\n\n\n","import { Audio } from 'react-loader-spinner';\n\nexport const Loader = () => (\n    <div >\n      <Audio\n  height=\"80\"\n  width=\"80\"\n  radius=\"9\"\n  color=\"green\"\n  ariaLabel=\"three-dots-loading\"\n  wrapperStyle\n  wrapperClass\n/>\n    </div>\n  );\n\n"],"names":["API_KEY","getTrendMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","axios","params","api_key","sent","abrupt","data","results","stop","apply","arguments","getMovieById","_ref2","_callee2","id","_context2","concat","_x","getMoviesByQuery","_ref3","_callee3","query","_context3","_x2","getMovieCastById","_ref4","_callee4","_context4","cast","_x3","getMovieReviewsById","_ref5","_callee5","_context5","console","log","_x4","_useState","useState","_useState2","_slicedToArray","setCast","_useState3","_useState4","loading","setLoading","_useState5","_useState6","error","setError","useParams","useEffect","addCast","Notiflix","t0","message","finish","elements","map","name","character","profile_path","_jsxs","children","_jsx","src","alt","width","isCast","Boolean","length","className","styles","Loader","Audio","height","radius","color","ariaLabel","wrapperStyle","wrapperClass"],"sourceRoot":""}